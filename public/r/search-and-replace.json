{
  "name": "search-and-replace",
  "type": "registry:block",
  "description": "",
  "dependencies": [
    "@tiptap/core",
    "@tiptap/pm",
    "@tiptap/react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "popover",
    "checkbox",
    "tooltip",
    "separator"
  ],
  "files": [
    {
      "path": "extensions/search-and-replace.tsx",
      "type": "registry:component",
      "content": "import { type Editor as CoreEditor, Extension, type Range } from \"@tiptap/core\";\nimport type { Node as PMNode } from \"@tiptap/pm/model\";\nimport { Plugin, PluginKey } from \"@tiptap/pm/state\";\nimport { Decoration, DecorationSet, type EditorView } from \"@tiptap/pm/view\";\n\ndeclare module \"@tiptap/core\" {\n\tinterface Commands<ReturnType> {\n\t\tsearch: {\n\t\t\t/**\n\t\t\t * @description Set search term in extension.\n\t\t\t */\n\t\t\tsetSearchTerm: (searchTerm: string) => ReturnType;\n\t\t\t/**\n\t\t\t * @description Set replace term in extension.\n\t\t\t */\n\t\t\tsetReplaceTerm: (replaceTerm: string) => ReturnType;\n\t\t\t/**\n\t\t\t * @description Replace first instance of search result with given replace term.\n\t\t\t */\n\t\t\treplace: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Replace all instances of search result with given replace term.\n\t\t\t */\n\t\t\treplaceAll: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Select the next search result.\n\t\t\t */\n\t\t\tselectNextResult: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Select the previous search result.\n\t\t\t */\n\t\t\tselectPreviousResult: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Set case sensitivity in extension.\n\t\t\t */\n\t\t\tsetCaseSensitive: (caseSensitive: boolean) => ReturnType;\n\t\t};\n\t}\n}\n\ninterface TextNodeWithPosition {\n\ttext: string;\n\tpos: number;\n}\n\nconst getRegex = (\n\tsearchString: string,\n\tdisableRegex: boolean,\n\tcaseSensitive: boolean,\n): RegExp => {\n\tconst escapedString = disableRegex\n\t\t? searchString.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n\t\t: searchString;\n\treturn new RegExp(escapedString, caseSensitive ? \"gu\" : \"gui\");\n};\n\ninterface ProcessedSearches {\n\tdecorationsToReturn: DecorationSet;\n\tresults: Range[];\n}\n\nfunction processSearches(\n\tdoc: PMNode,\n\tsearchTerm: RegExp,\n\tselectedResultIndex: number,\n\tsearchResultClass: string,\n\tselectedResultClass: string,\n): ProcessedSearches {\n\tconst decorations: Decoration[] = [];\n\tconst results: Range[] = [];\n\tconst textNodesWithPosition: TextNodeWithPosition[] = [];\n\n\tif (!searchTerm) {\n\t\treturn { decorationsToReturn: DecorationSet.empty, results: [] };\n\t}\n\n\tdoc.descendants((node, pos) => {\n\t\tif (node.isText) {\n\t\t\ttextNodesWithPosition.push({ text: node.text || \"\", pos });\n\t\t}\n\t});\n\n\tfor (const { text, pos } of textNodesWithPosition) {\n\t\tconst matches = Array.from(text.matchAll(searchTerm)).filter(\n\t\t\t([matchText]) => matchText.trim(),\n\t\t);\n\n\t\tfor (const match of matches) {\n\t\t\tif (match.index !== undefined) {\n\t\t\t\tresults.push({\n\t\t\t\t\tfrom: pos + match.index,\n\t\t\t\t\tto: pos + match.index + match[0].length,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (let i = 0; i < results.length; i++) {\n\t\tconst { from, to } = results[i];\n\t\tdecorations.push(\n\t\t\tDecoration.inline(from, to, {\n\t\t\t\tclass:\n\t\t\t\t\tselectedResultIndex === i ? selectedResultClass : searchResultClass,\n\t\t\t}),\n\t\t);\n\t}\n\n\treturn {\n\t\tdecorationsToReturn: DecorationSet.create(doc, decorations),\n\t\tresults,\n\t};\n}\n\nconst replace = (\n\treplaceTerm: string,\n\tresults: Range[],\n\t{ state, dispatch }: any,\n) => {\n\tconst firstResult = results[0];\n\n\tif (!firstResult) {\n\t\treturn;\n\t}\n\n\tconst { from, to } = results[0];\n\n\tif (dispatch) {\n\t\tdispatch(state.tr.insertText(replaceTerm, from, to));\n\t}\n};\n\nconst rebaseNextResult = (\n\treplaceTerm: string,\n\tindex: number,\n\tlastOffset: number,\n\tresults: Range[],\n): [number, Range[]] | null => {\n\tconst nextIndex = index + 1;\n\n\tif (!results[nextIndex]) {\n\t\treturn null;\n\t}\n\n\tconst { from: currentFrom, to: currentTo } = results[index];\n\n\tconst offset = currentTo - currentFrom - replaceTerm.length + lastOffset;\n\n\tconst { from, to } = results[nextIndex];\n\n\tresults[nextIndex] = {\n\t\tto: to - offset,\n\t\tfrom: from - offset,\n\t};\n\n\treturn [offset, results];\n};\n\nconst replaceAll = (\n\treplaceTerm: string,\n\tresults: Range[],\n\t{ tr, dispatch }: { tr: any; dispatch: any },\n) => {\n\tif (!results.length) {\n\t\treturn;\n\t}\n\n\tlet offset = 0;\n\n\tfor (let i = 0; i < results.length; i++) {\n\t\tconst { from, to } = results[i];\n\t\ttr.insertText(replaceTerm, from, to);\n\t\tconst rebaseResponse = rebaseNextResult(replaceTerm, i, offset, results);\n\n\t\tif (rebaseResponse) {\n\t\t\toffset = rebaseResponse[0];\n\t\t}\n\t}\n\n\tdispatch(tr);\n};\n\nconst selectNext = (editor: CoreEditor) => {\n\tconst { results } = editor.storage\n\t\t.searchAndReplace as SearchAndReplaceStorage;\n\n\tif (!results.length) {\n\t\treturn;\n\t}\n\n\tconst { selectedResult } = editor.storage.searchAndReplace;\n\n\tif (selectedResult >= results.length - 1) {\n\t\teditor.storage.searchAndReplace.selectedResult = 0;\n\t} else {\n\t\teditor.storage.searchAndReplace.selectedResult += 1;\n\t}\n\n\tconst { from } = results[editor.storage.searchAndReplace.selectedResult];\n\n\tconst view: EditorView | undefined = editor.view;\n\n\tif (view) {\n\t\tview\n\t\t\t.domAtPos(from)\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.node.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n\t}\n};\n\nconst selectPrevious = (editor: CoreEditor) => {\n\tconst { results } = editor.storage.searchAndReplace;\n\n\tif (!results.length) {\n\t\treturn;\n\t}\n\n\tconst { selectedResult } = editor.storage.searchAndReplace;\n\n\tif (selectedResult <= 0) {\n\t\teditor.storage.searchAndReplace.selectedResult = results.length - 1;\n\t} else {\n\t\teditor.storage.searchAndReplace.selectedResult -= 1;\n\t}\n\n\tconst { from } = results[editor.storage.searchAndReplace.selectedResult];\n\n\tconst view: EditorView | undefined = editor.view;\n\n\tif (view) {\n\t\tview\n\t\t\t.domAtPos(from)\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.node.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n\t}\n};\n\nexport const searchAndReplacePluginKey = new PluginKey(\n\t\"searchAndReplacePlugin\",\n);\n\nexport interface SearchAndReplaceOptions {\n\tsearchResultClass: string;\n\tselectedResultClass: string;\n\tdisableRegex: boolean;\n}\n\nexport interface SearchAndReplaceStorage {\n\tsearchTerm: string;\n\treplaceTerm: string;\n\tresults: Range[];\n\tlastSearchTerm: string;\n\tselectedResult: number;\n\tlastSelectedResult: number;\n\tcaseSensitive: boolean;\n\tlastCaseSensitiveState: boolean;\n}\n\nexport const SearchAndReplace = Extension.create<\n\tSearchAndReplaceOptions,\n\tSearchAndReplaceStorage\n>({\n\tname: \"searchAndReplace\",\n\n\taddOptions() {\n\t\treturn {\n\t\t\tsearchResultClass: \" bg-yellow-200\",\n\t\t\tselectedResultClass: \"bg-yellow-500\",\n\t\t\tdisableRegex: true,\n\t\t};\n\t},\n\n\taddStorage() {\n\t\treturn {\n\t\t\tsearchTerm: \"\",\n\t\t\treplaceTerm: \"\",\n\t\t\tresults: [],\n\t\t\tlastSearchTerm: \"\",\n\t\t\tselectedResult: 0,\n\t\t\tlastSelectedResult: 0,\n\t\t\tcaseSensitive: false,\n\t\t\tlastCaseSensitiveState: false,\n\t\t};\n\t},\n\n\taddCommands() {\n\t\treturn {\n\t\t\tsetSearchTerm:\n\t\t\t\t(searchTerm: string) =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\teditor.storage.searchAndReplace.searchTerm = searchTerm;\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tsetReplaceTerm:\n\t\t\t\t(replaceTerm: string) =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\teditor.storage.searchAndReplace.replaceTerm = replaceTerm;\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\treplace:\n\t\t\t\t() =>\n\t\t\t\t({ editor, state, dispatch }) => {\n\t\t\t\t\tconst { replaceTerm, results } = editor.storage.searchAndReplace;\n\n\t\t\t\t\treplace(replaceTerm, results, { state, dispatch });\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\treplaceAll:\n\t\t\t\t() =>\n\t\t\t\t({ editor, tr, dispatch }) => {\n\t\t\t\t\tconst { replaceTerm, results } = editor.storage.searchAndReplace;\n\n\t\t\t\t\treplaceAll(replaceTerm, results, { tr, dispatch });\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tselectNextResult:\n\t\t\t\t() =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\tselectNext(editor);\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tselectPreviousResult:\n\t\t\t\t() =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\tselectPrevious(editor);\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tsetCaseSensitive:\n\t\t\t\t(caseSensitive: boolean) =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\teditor.storage.searchAndReplace.caseSensitive = caseSensitive;\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t};\n\t},\n\n\taddProseMirrorPlugins() {\n\t\tconst editor = this.editor;\n\t\tconst { searchResultClass, selectedResultClass, disableRegex } =\n\t\t\tthis.options;\n\n\t\tconst setLastSearchTerm = (t: string) => {\n\t\t\teditor.storage.searchAndReplace.lastSearchTerm = t;\n\t\t};\n\n\t\tconst setLastSelectedResult = (r: number) => {\n\t\t\teditor.storage.searchAndReplace.lastSelectedResult = r;\n\t\t};\n\n\t\tconst setLastCaseSensitiveState = (s: boolean) => {\n\t\t\teditor.storage.searchAndReplace.lastCaseSensitiveState = s;\n\t\t};\n\n\t\treturn [\n\t\t\tnew Plugin({\n\t\t\t\tkey: searchAndReplacePluginKey,\n\t\t\t\tstate: {\n\t\t\t\t\tinit: () => DecorationSet.empty,\n\t\t\t\t\tapply({ doc, docChanged }, oldState) {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tsearchTerm,\n\t\t\t\t\t\t\tselectedResult,\n\t\t\t\t\t\t\tlastSearchTerm,\n\t\t\t\t\t\t\tlastSelectedResult,\n\t\t\t\t\t\t\tcaseSensitive,\n\t\t\t\t\t\t\tlastCaseSensitiveState,\n\t\t\t\t\t\t} = editor.storage.searchAndReplace as SearchAndReplaceStorage;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!docChanged &&\n\t\t\t\t\t\t\tlastSearchTerm === searchTerm &&\n\t\t\t\t\t\t\tselectedResult === lastSelectedResult &&\n\t\t\t\t\t\t\tlastCaseSensitiveState === caseSensitive\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn oldState;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetLastSearchTerm(searchTerm);\n\t\t\t\t\t\tsetLastSelectedResult(selectedResult);\n\t\t\t\t\t\tsetLastCaseSensitiveState(caseSensitive);\n\n\t\t\t\t\t\tif (!searchTerm) {\n\t\t\t\t\t\t\teditor.storage.searchAndReplace.selectedResult = 0;\n\t\t\t\t\t\t\teditor.storage.searchAndReplace.results = [];\n\t\t\t\t\t\t\treturn DecorationSet.empty;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { decorationsToReturn, results } = processSearches(\n\t\t\t\t\t\t\tdoc,\n\t\t\t\t\t\t\tgetRegex(searchTerm, disableRegex, caseSensitive),\n\t\t\t\t\t\t\tselectedResult,\n\t\t\t\t\t\t\tsearchResultClass,\n\t\t\t\t\t\t\tselectedResultClass,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\teditor.storage.searchAndReplace.results = results;\n\n\t\t\t\t\t\tif (selectedResult > results.length) {\n\t\t\t\t\t\t\teditor.storage.searchAndReplace.selectedResult = 1;\n\t\t\t\t\t\t\teditor.commands.selectPreviousResult();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn decorationsToReturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tprops: {\n\t\t\t\t\tdecorations(state) {\n\t\t\t\t\t\treturn this.getState(state);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t];\n\t},\n});\n\nexport default SearchAndReplace;\n",
      "target": "components/extensions/search-and-replace.tsx"
    },
    {
      "path": "toolbars/search-and-replace-toolbar.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { ArrowLeft, ArrowRight, Repeat, X } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport type { SearchAndReplaceStorage } from \"@/components/extensions/search-and-replace\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nexport function SearchAndReplaceToolbar() {\n\tconst { editor } = useToolbar();\n\n\tconst [open, setOpen] = useState(false);\n\tconst [replacing, setReplacing] = useState(false);\n\tconst [searchText, setSearchText] = useState(\"\");\n\tconst [replaceText, setReplaceText] = useState(\"\");\n\tconst [checked, setChecked] = useState(false);\n\n\tconst results = editor?.storage?.searchAndReplace\n\t\t.results as SearchAndReplaceStorage[\"results\"];\n\tconst selectedResult = editor?.storage?.searchAndReplace\n\t\t.selectedResult as SearchAndReplaceStorage[\"selectedResult\"];\n\n\tconst replace = () => editor?.chain().replace().run();\n\tconst replaceAll = () => editor?.chain().replaceAll().run();\n\tconst selectNext = () => editor?.chain().selectNextResult().run();\n\tconst selectPrevious = () => editor?.chain().selectPreviousResult().run();\n\n\tuseEffect(() => {\n\t\teditor?.chain().setSearchTerm(searchText).run();\n\t}, [searchText, editor]);\n\n\tuseEffect(() => {\n\t\teditor?.chain().setReplaceTerm(replaceText).run();\n\t}, [replaceText, editor]);\n\n\tuseEffect(() => {\n\t\teditor?.chain().setCaseSensitive(checked).run();\n\t}, [checked, editor]);\n\n\tuseEffect(() => {\n\t\tif (!open) {\n\t\t\tsetReplaceText(\"\");\n\t\t\tsetSearchText(\"\");\n\t\t\tsetReplacing(false);\n\t\t}\n\t}, [open]);\n\n\treturn (\n\t\t<Popover open={open}>\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<PopoverTrigger disabled={!editor} asChild>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetOpen(!open);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={cn(\"h-8 w-max px-3 font-normal\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Repeat className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t<p>Search & Replace</p>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Search & Replace</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\n\t\t\t<PopoverContent\n\t\t\t\talign=\"end\"\n\t\t\t\tonCloseAutoFocus={(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}}\n\t\t\t\tonEscapeKeyDown={() => {\n\t\t\t\t\tsetOpen(false);\n\t\t\t\t}}\n\t\t\t\tclassName=\"relative flex w-[400px] px-3 py-2.5\"\n\t\t\t>\n\t\t\t\t{!replacing ? (\n\t\t\t\t\t<div className={cn(\"relative flex gap-1.5 items-center\")}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tclassName=\" w-48\"\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tsetSearchText(e.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{results?.length === 0 ? selectedResult : selectedResult + 1}/\n\t\t\t\t\t\t\t{results?.length}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={selectPrevious}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ArrowLeft className=\"size-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={selectNext}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ArrowRight className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Separator orientation=\"vertical\" className=\"h-7 mx-0.5\" />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetReplacing(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Repeat className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className={cn(\"relative w-full\")}>\n\t\t\t\t\t\t<X\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName=\"absolute right-3 top-3 h-4 w-4 cursor-pointer\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"flex w-full items-center gap-3\">\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tclassName=\"size-7 rounded-full\"\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetReplacing(false);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ArrowLeft className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<h2 className=\"text-sm font-medium\">Search and replace</h2>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"my-2 w-full\">\n\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Label className=\"mb-1 text-xs text-gray-11\">Search</Label>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tsetSearchText(e.target.value);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{results?.length === 0 ? selectedResult : selectedResult + 1}/\n\t\t\t\t\t\t\t\t{results?.length}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mb-2\">\n\t\t\t\t\t\t\t\t<Label className=\"mb-1 text-xs text-gray-11\">\n\t\t\t\t\t\t\t\t\tReplace with\n\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\t\tvalue={replaceText}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tsetReplaceText(e.target.value);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Replace...\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mt-3 flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\tchecked={checked}\n\t\t\t\t\t\t\t\t\tonCheckedChange={(checked: boolean) => {\n\t\t\t\t\t\t\t\t\t\tsetChecked(checked);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tid=\"match_case\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Label\n\t\t\t\t\t\t\t\t\thtmlFor=\"match_case\"\n\t\t\t\t\t\t\t\t\tclassName=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tMatch case\n\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"actions mt-6 flex items-center justify-between\">\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={selectPrevious}\n\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 w-7\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ArrowLeft className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={selectNext}\n\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 w-7\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ArrowRight className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"main-actions flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 px-3 text-xs\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\tonClick={replaceAll}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tReplace All\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={replace}\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 px-3 text-xs\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tReplace\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t);\n}\n",
      "target": "components/toolbars/search-and-replace-toolbar.tsx"
    },
    {
      "path": "toolbars/toolbar-provider.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport type { Editor } from \"@tiptap/react\";\nimport React from \"react\";\n\nexport interface ToolbarContextProps {\n\teditor: Editor;\n}\n\nexport const ToolbarContext = React.createContext<ToolbarContextProps | null>(\n\tnull,\n);\n\ninterface ToolbarProviderProps {\n\teditor: Editor;\n\tchildren: React.ReactNode;\n}\n\nexport const ToolbarProvider = ({ editor, children }: ToolbarProviderProps) => {\n\treturn (\n\t\t<ToolbarContext.Provider value={{ editor }}>\n\t\t\t{children}\n\t\t</ToolbarContext.Provider>\n\t);\n};\n\nexport const useToolbar = () => {\n\tconst context = React.useContext(ToolbarContext);\n\n\tif (!context) {\n\t\tthrow new Error(\"useToolbar must be used within a ToolbarProvider\");\n\t}\n\n\treturn context;\n};\n",
      "target": "components/toolbars/toolbar-provider.tsx"
    }
  ]
}