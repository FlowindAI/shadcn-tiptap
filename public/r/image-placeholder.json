{
  "name": "image-placeholder",
  "type": "registry:block",
  "description": "",
  "dependencies": [
    "@tiptap/core",
    "@tiptap/react",
    "react-dropzone",
    "@tiptap/extension-image"
  ],
  "registryDependencies": [
    "input",
    "popover",
    "button",
    "tabs",
    "dropdown-menu",
    "separator"
  ],
  "files": [
    {
      "path": "extensions/image-placeholder.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n\tNODE_HANDLES_SELECTED_STYLE_CLASSNAME,\n\tcn,\n\tisValidUrl,\n} from \"@/lib/utils\";\nimport {\n\ttype CommandProps,\n\ttype Editor,\n\tNode,\n\ttype NodeViewProps,\n\tNodeViewWrapper,\n\tReactNodeViewRenderer,\n\tmergeAttributes,\n} from \"@tiptap/react\";\nimport { Image, Link, Upload } from \"lucide-react\";\nimport { type FormEvent, useState } from \"react\";\n\nexport interface ImagePlaceholderOptions {\n\tHTMLAttributes: Record<string, any>;\n\tonDrop: (files: File[], editor: Editor) => void;\n\tonDropRejected?: (files: File[], editor: Editor) => void;\n\tonEmbed: (url: string, editor: Editor) => void;\n\tallowedMimeTypes?: Record<string, string[]>;\n\tmaxFiles?: number;\n\tmaxSize?: number;\n}\n\ndeclare module \"@tiptap/core\" {\n\tinterface Commands<ReturnType> {\n\t\timagePlaceholder: {\n\t\t\t/**\n\t\t\t * Inserts an image placeholder\n\t\t\t */\n\t\t\tinsertImagePlaceholder: () => ReturnType;\n\t\t};\n\t}\n}\n\nexport const ImagePlaceholder = Node.create<ImagePlaceholderOptions>({\n\tname: \"image-placeholder\",\n\n\taddOptions() {\n\t\treturn {\n\t\t\tHTMLAttributes: {},\n\t\t\tonDrop: () => {},\n\t\t\tonDropRejected: () => {},\n\t\t\tonEmbed: () => {},\n\t\t};\n\t},\n\n\tgroup: \"block\",\n\n\tparseHTML() {\n\t\treturn [{ tag: `div[data-type=\"${this.name}\"]` }];\n\t},\n\n\trenderHTML({ HTMLAttributes }) {\n\t\treturn [\"div\", mergeAttributes(HTMLAttributes)];\n\t},\n\n\taddNodeView() {\n\t\treturn ReactNodeViewRenderer(ImagePlaceholderComponent, {\n\t\t\tclassName: NODE_HANDLES_SELECTED_STYLE_CLASSNAME,\n\t\t});\n\t},\n\n\taddCommands() {\n\t\treturn {\n\t\t\tinsertImagePlaceholder: () => (props: CommandProps) => {\n\t\t\t\treturn props.commands.insertContent({\n\t\t\t\t\ttype: \"image-placeholder\",\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t},\n});\n\nfunction ImagePlaceholderComponent(props: NodeViewProps) {\n\tconst { editor, extension, selected } = props;\n\n\tconst [open, setOpen] = useState(false);\n\tconst [url, setUrl] = useState(\"\");\n\tconst [urlError, setUrlError] = useState(false);\n\tconst [isDragActive, setIsDragActive] = useState(false);\n\tconst [isDragReject, setIsDragReject] = useState(false);\n\n\tconst handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tsetIsDragActive(true);\n\t};\n\n\tconst handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tsetIsDragActive(false);\n\t\tsetIsDragReject(false);\n\t};\n\n\tconst handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t};\n\n\tconst handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tsetIsDragActive(false);\n\t\tsetIsDragReject(false);\n\n\t\tconst { files } = e.dataTransfer;\n\t\tconst acceptedFiles: File[] = [];\n\t\tconst rejectedFiles: File[] = [];\n\n\t\tArray.from(files).map((file) => {\n\t\t\tif (\n\t\t\t\textension.options.allowedMimeTypes &&\n\t\t\t\t!Object.keys(extension.options.allowedMimeTypes).some((type) =>\n\t\t\t\t\tfile.type.match(type),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\trejectedFiles.push(file);\n\t\t\t} else if (\n\t\t\t\textension.options.maxSize &&\n\t\t\t\tfile.size > extension.options.maxSize\n\t\t\t) {\n\t\t\t\trejectedFiles.push(file);\n\t\t\t} else {\n\t\t\t\tacceptedFiles.push(file);\n\t\t\t}\n\t\t});\n\n\t\tif (rejectedFiles.length > 0) {\n\t\t\tsetIsDragReject(true);\n\t\t\textension.options.onDropRejected?.(rejectedFiles, editor);\n\t\t}\n\n\t\tif (acceptedFiles.length > 0) {\n\t\t\thandleAcceptedFiles(acceptedFiles);\n\t\t}\n\t};\n\n\tconst handleAcceptedFiles = (acceptedFiles: File[]) => {\n\t\tacceptedFiles.map((file) => {\n\t\t\tconst reader = new FileReader();\n\n\t\t\treader.onload = () => {\n\t\t\t\tconst src = reader.result as string;\n\t\t\t\teditor.chain().focus().setImage({ src }).run();\n\t\t\t};\n\n\t\t\treader.readAsDataURL(file);\n\t\t});\n\n\t\tif (extension.options.onDrop) {\n\t\t\textension.options.onDrop(acceptedFiles, editor);\n\t\t}\n\t};\n\n\tconst handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst files = Array.from(e.target.files || []);\n\t\thandleAcceptedFiles(files);\n\t};\n\n\tconst handleInsertEmbed = (e: FormEvent) => {\n\t\te.preventDefault();\n\t\tconst valid = isValidUrl(url);\n\t\tif (!valid) {\n\t\t\tsetUrlError(true);\n\t\t\treturn;\n\t\t}\n\t\tif (url !== \"\") {\n\t\t\teditor.chain().focus().setImage({ src: url }).run();\n\t\t\textension.options.onEmbed(url, editor);\n\t\t}\n\t};\n\n\treturn (\n\t\t<NodeViewWrapper className=\"w-full\">\n\t\t\t<Popover modal open={open}>\n\t\t\t\t<PopoverTrigger\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetOpen(true);\n\t\t\t\t\t}}\n\t\t\t\t\tasChild\n\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"flex cursor-pointer items-center gap-3 rounded-md bg-accent p-2 py-3 text-sm text-accent-foreground transition-colors hover:bg-secondary\",\n\t\t\t\t\t\t\tselected && \"bg-primary/10 hover:bg-primary/20\",\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Image className=\"h-6 w-6\" />\n\t\t\t\t\t\tAdd an image\n\t\t\t\t\t</div>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent\n\t\t\t\t\tclassName=\"w-[450px] px-0 py-2\"\n\t\t\t\t\tonPointerDownOutside={() => {\n\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t}}\n\t\t\t\t\tonEscapeKeyDown={() => {\n\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Tabs defaultValue=\"upload\" className=\"px-3\">\n\t\t\t\t\t\t<TabsList>\n\t\t\t\t\t\t\t<TabsTrigger className=\"px-2 py-1 text-sm\" value=\"upload\">\n\t\t\t\t\t\t\t\t<Upload className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\tUpload\n\t\t\t\t\t\t\t</TabsTrigger>\n\t\t\t\t\t\t\t<TabsTrigger className=\"px-2 py-1 text-sm\" value=\"url\">\n\t\t\t\t\t\t\t\t<Link className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\tEmbed link\n\t\t\t\t\t\t\t</TabsTrigger>\n\t\t\t\t\t\t</TabsList>\n\n\t\t\t\t\t\t<TabsContent value=\"upload\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tonDragEnter={handleDragEnter}\n\t\t\t\t\t\t\t\tonDragLeave={handleDragLeave}\n\t\t\t\t\t\t\t\tonDragOver={handleDragOver}\n\t\t\t\t\t\t\t\tonDrop={handleDrop}\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"my-2 rounded-md border border-dashed text-sm transition-colors\",\n\t\t\t\t\t\t\t\t\tisDragActive && \"border-primary bg-secondary\",\n\t\t\t\t\t\t\t\t\tisDragReject && \"border-destructive bg-destructive/10\",\n\t\t\t\t\t\t\t\t\t\"hover:bg-secondary\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\taccept={Object.keys(\n\t\t\t\t\t\t\t\t\t\textension.options.allowedMimeTypes || {},\n\t\t\t\t\t\t\t\t\t).join(\",\")}\n\t\t\t\t\t\t\t\t\tmultiple={extension.options.maxFiles !== 1}\n\t\t\t\t\t\t\t\t\tonChange={handleFileInputChange}\n\t\t\t\t\t\t\t\t\tclassName=\"hidden\"\n\t\t\t\t\t\t\t\t\tid=\"file-input\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\thtmlFor=\"file-input\"\n\t\t\t\t\t\t\t\t\tclassName=\"flex h-28 w-full cursor-pointer flex-col items-center justify-center text-center\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Upload className=\"mx-auto mb-2 h-6 w-6\" />\n\t\t\t\t\t\t\t\t\tDrag & drop or click to upload\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</TabsContent>\n\t\t\t\t\t\t<TabsContent value=\"url\">\n\t\t\t\t\t\t\t<form onSubmit={handleInsertEmbed}>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue={url}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tsetUrl(e.target.value);\n\t\t\t\t\t\t\t\t\t\tif (urlError) {\n\t\t\t\t\t\t\t\t\t\t\tsetUrlError(false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Paste the image link...\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{urlError && (\n\t\t\t\t\t\t\t\t\t<p className=\"py-1.5 text-xs text-danger-11\">\n\t\t\t\t\t\t\t\t\t\tPlease enter a valid URL\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={handleInsertEmbed}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\tclassName=\"my-2 h-8 w-full p-2 text-xs\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tEmbed Image\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<p className=\"text-center text-xs text-gray-11\">\n\t\t\t\t\t\t\t\t\tWorks with any image from the web\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</TabsContent>\n\t\t\t\t\t</Tabs>\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t</NodeViewWrapper>\n\t);\n}\n",
      "target": "components/extensions/image-placeholder.tsx"
    },
    {
      "path": "extensions/image.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport Image from \"@tiptap/extension-image\";\nimport {\n\tNodeViewContent,\n\ttype NodeViewProps,\n\tNodeViewWrapper,\n\tReactNodeViewRenderer,\n} from \"@tiptap/react\";\nimport {\n\tAlignCenter,\n\tAlignLeft,\n\tAlignRight,\n\tCopy,\n\tMaximize,\n\tMoreVertical,\n\tTrash,\n} from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn, duplicateContent } from \"@/lib/utils\";\n\nexport const ImageExtension = Image.extend({\n\taddAttributes() {\n\t\treturn {\n\t\t\tsrc: {\n\t\t\t\tdefault: null,\n\t\t\t},\n\t\t\talt: {\n\t\t\t\tdefault: null,\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\tdefault: null,\n\t\t\t},\n\t\t\twidth: {\n\t\t\t\tdefault: \"100%\",\n\t\t\t},\n\t\t\theight: {\n\t\t\t\tdefault: null,\n\t\t\t},\n\t\t\talign: {\n\t\t\t\tdefault: \"center\",\n\t\t\t},\n\t\t};\n\t},\n\n\taddNodeView: () => {\n\t\treturn ReactNodeViewRenderer(TiptapImage);\n\t},\n});\n\nfunction TiptapImage(props: NodeViewProps) {\n\tconst { node, editor, selected, deleteNode, updateAttributes } = props;\n\tconst imageRef = useRef<HTMLImageElement | null>(null);\n\tconst nodeRef = useRef<HTMLDivElement | null>(null);\n\tconst [resizing, setResizing] = useState(false);\n\tconst [resizingPosition, setResizingPosition] = useState<\"left\" | \"right\">(\n\t\t\"left\",\n\t);\n\tconst [resizeInitialWidth, setResizeInitialWidth] = useState(0);\n\tconst [resizeInitialMouseX, setResizeInitialMouseX] = useState(0);\n\n\tconst [openedMore, setOpenedMore] = useState(false);\n\n\tfunction handleResizingPosition({\n\t\te,\n\t\tposition,\n\t}: {\n\t\te: React.MouseEvent<HTMLDivElement, MouseEvent>;\n\t\tposition: \"left\" | \"right\";\n\t}) {\n\t\tstartResize(e);\n\t\tsetResizingPosition(position);\n\t}\n\n\tfunction startResize(event: React.MouseEvent<HTMLDivElement>) {\n\t\tevent.preventDefault();\n\n\t\tsetResizing(true);\n\n\t\tsetResizeInitialMouseX(event.clientX);\n\t\tif (imageRef.current) {\n\t\t\tsetResizeInitialWidth(imageRef.current.offsetWidth);\n\t\t}\n\t}\n\n\tfunction resize(event: MouseEvent) {\n\t\tif (!resizing) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet dx = event.clientX - resizeInitialMouseX;\n\t\tif (resizingPosition === \"left\") {\n\t\t\tdx = resizeInitialMouseX - event.clientX;\n\t\t}\n\n\t\tconst newWidth = Math.max(resizeInitialWidth + dx, 150); // Minimum width: 150\n\t\tconst parentWidth = nodeRef.current?.parentElement?.offsetWidth || 0; // Get the parent element's width\n\n\t\tif (newWidth < parentWidth) {\n\t\t\tupdateAttributes({\n\t\t\t\twidth: newWidth,\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction endResize() {\n\t\tsetResizing(false);\n\t\tsetResizeInitialMouseX(0);\n\t\tsetResizeInitialWidth(0);\n\t}\n\n\tfunction handleTouchStart(\n\t\tevent: React.TouchEvent,\n\t\tposition: \"left\" | \"right\",\n\t) {\n\t\tevent.preventDefault();\n\n\t\tsetResizing(true);\n\t\tsetResizingPosition(position);\n\n\t\tsetResizeInitialMouseX(event.touches[0].clientX);\n\t\tif (imageRef.current) {\n\t\t\tsetResizeInitialWidth(imageRef.current.offsetWidth);\n\t\t}\n\t}\n\n\tfunction handleTouchMove(event: TouchEvent) {\n\t\tif (!resizing) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet dx = event.touches[0].clientX - resizeInitialMouseX;\n\t\tif (resizingPosition === \"left\") {\n\t\t\tdx = resizeInitialMouseX - event.touches[0].clientX;\n\t\t}\n\n\t\tconst newWidth = Math.max(resizeInitialWidth + dx, 150);\n\t\tconst parentWidth = nodeRef.current?.parentElement?.offsetWidth || 0;\n\n\t\tif (newWidth < parentWidth) {\n\t\t\tupdateAttributes({\n\t\t\t\twidth: newWidth,\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction handleTouchEnd() {\n\t\tsetResizing(false);\n\t\tsetResizeInitialMouseX(0);\n\t\tsetResizeInitialWidth(0);\n\t}\n\n\t// biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n\tuseEffect(() => {\n\t\t// Mouse events\n\t\twindow.addEventListener(\"mousemove\", resize);\n\t\twindow.addEventListener(\"mouseup\", endResize);\n\t\t// Touch events\n\t\twindow.addEventListener(\"touchmove\", handleTouchMove);\n\t\twindow.addEventListener(\"touchend\", handleTouchEnd);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"mousemove\", resize);\n\t\t\twindow.removeEventListener(\"mouseup\", endResize);\n\t\t\twindow.removeEventListener(\"touchmove\", handleTouchMove);\n\t\t\twindow.removeEventListener(\"touchend\", handleTouchEnd);\n\t\t};\n\t}, [resizing, resizeInitialMouseX, resizeInitialWidth]);\n\n\treturn (\n\t\t<NodeViewWrapper\n\t\t\tref={nodeRef}\n\t\t\tclassName={cn(\n\t\t\t\t\"relative flex flex-col rounded-md border-2 border-transparent\",\n\t\t\t\tselected ? \"border-blue-300\" : \"\",\n\t\t\t\tnode.attrs.align === \"left\" && \"left-0 -translate-x-0\",\n\t\t\t\tnode.attrs.align === \"center\" && \"left-1/2 -translate-x-1/2\",\n\t\t\t\tnode.attrs.align === \"right\" && \"left-full -translate-x-full\",\n\t\t\t)}\n\t\t\tstyle={{ width: node.attrs.width }}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"group relative flex flex-col rounded-md\",\n\t\t\t\t\tresizing && \"\",\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<img\n\t\t\t\t\tref={imageRef}\n\t\t\t\t\tsrc={node.attrs.src}\n\t\t\t\t\talt={node.attrs.alt}\n\t\t\t\t\ttitle={node.attrs.title}\n\t\t\t\t/>\n\t\t\t\t<NodeViewContent as=\"figcaption\" className=\"text-center\">\n\t\t\t\t\t{node.attrs.title}\n\t\t\t\t</NodeViewContent>\n\n\t\t\t\t{editor?.isEditable && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"absolute inset-y-0 z-20 flex w-[25px] cursor-col-resize items-center justify-start p-2\"\n\t\t\t\t\t\t\tstyle={{ left: 0 }}\n\t\t\t\t\t\t\tonMouseDown={(event) => {\n\t\t\t\t\t\t\t\thandleResizingPosition({ e: event, position: \"left\" });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonTouchStart={(event) => handleTouchStart(event, \"left\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"z-20 h-[70px] w-1 rounded-xl border bg-[rgba(0,0,0,0.65)] opacity-0 transition-all group-hover:opacity-100\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"absolute inset-y-0 z-20 flex w-[25px] cursor-col-resize items-center justify-end p-2\"\n\t\t\t\t\t\t\tstyle={{ right: 0 }}\n\t\t\t\t\t\t\tonMouseDown={(event) => {\n\t\t\t\t\t\t\t\thandleResizingPosition({ e: event, position: \"right\" });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonTouchStart={(event) => handleTouchStart(event, \"right\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"z-20 h-[70px] w-1 rounded-xl border bg-[rgba(0,0,0,0.65)] opacity-0 transition-all group-hover:opacity-100\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"absolute right-4 top-4 flex items-center gap-1 rounded-md border bg-background p-1 opacity-0 transition-opacity\",\n\t\t\t\t\t\t\t\t!resizing && \"group-hover:opacity-100\",\n\t\t\t\t\t\t\t\topenedMore && \"opacity-100\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"size-7\",\n\t\t\t\t\t\t\t\t\tnode.attrs.align === \"left\" && \"bg-accent\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tupdateAttributes({\n\t\t\t\t\t\t\t\t\t\talign: \"left\",\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<AlignLeft className=\"size-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"size-7\",\n\t\t\t\t\t\t\t\t\tnode.attrs.align === \"center\" && \"bg-accent\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tupdateAttributes({\n\t\t\t\t\t\t\t\t\t\talign: \"center\",\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<AlignCenter className=\"size-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\"size-7\",\n\t\t\t\t\t\t\t\t\tnode.attrs.align === \"right\" && \"bg-accent\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tupdateAttributes({\n\t\t\t\t\t\t\t\t\t\talign: \"right\",\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<AlignRight className=\"size-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Separator orientation=\"vertical\" className=\"h-[20px]\" />\n\t\t\t\t\t\t\t<DropdownMenu\n\t\t\t\t\t\t\t\topen={openedMore}\n\t\t\t\t\t\t\t\tonOpenChange={(val) => {\n\t\t\t\t\t\t\t\t\tsetOpenedMore(val);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t\t\t\t<Button size=\"icon\" className=\"size-7\" variant=\"ghost\">\n\t\t\t\t\t\t\t\t\t\t<MoreVertical className=\"size-4\" />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t\t\t\t<DropdownMenuContent\n\t\t\t\t\t\t\t\t\talign=\"start\"\n\t\t\t\t\t\t\t\t\talignOffset={-90}\n\t\t\t\t\t\t\t\t\tclassName=\"mt-1 text-sm\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<DropdownMenuItem\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tduplicateContent(editor);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Copy className=\"mr-2 size-4\" /> Duplicate\n\t\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t\t\t<DropdownMenuItem\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tupdateAttributes({\n\t\t\t\t\t\t\t\t\t\t\t\twidth: \"fit-content\",\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Maximize className=\"mr-2 size-4\" /> Full Screen\n\t\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t\t\t\t<DropdownMenuItem\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-destructive focus:text-destructive\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tdeleteNode();\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Trash className=\"mr-2 size-4\" /> Delete Image\n\t\t\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</NodeViewWrapper>\n\t);\n}\n",
      "target": "components/extensions/image.tsx"
    },
    {
      "path": "toolbars/image-placeholder-toolbar.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Image } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst ImagePlaceholderToolbar = React.forwardRef<\n\tHTMLButtonElement,\n\tButtonProps\n>(({ className, onClick, children, ...props }, ref) => {\n\tconst { editor } = useToolbar();\n\treturn (\n\t\t<Tooltip>\n\t\t\t<TooltipTrigger asChild>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\teditor?.isActive(\"image-placeholder\") && \"bg-accent\",\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\teditor?.chain().focus().insertImagePlaceholder().run();\n\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t}}\n\t\t\t\t\tref={ref}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t{children || <Image className=\"h-4 w-4\" />}\n\t\t\t\t</Button>\n\t\t\t</TooltipTrigger>\n\t\t\t<TooltipContent>\n\t\t\t\t<span>Image</span>\n\t\t\t</TooltipContent>\n\t\t</Tooltip>\n\t);\n});\n\nImagePlaceholderToolbar.displayName = \"ImagePlaceholderToolbar\";\n\nexport { ImagePlaceholderToolbar };\n",
      "target": "components/toolbars/image-placeholder-toolbar.tsx"
    }
  ]
}